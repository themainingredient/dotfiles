function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

/** @babel */

var _formatter = require('./formatter');

var formatter = _interopRequireWildcard(_formatter);

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

function isOption(option, options, fallback) {
  return options && typeof options[option] !== 'undefined' ? options[option] : fallback();
}

function isEntire(options, fallback) {
  return isOption('entire', options, fallback);
}

function isSelected(options, fallback) {
  return isOption('selected', options, fallback);
}

function isSorted(options, fallback) {
  return isOption('sorted', options, fallback);
}

var PrettyJSON = {
  config: {
    notifyOnParseError: {
      type: 'boolean',
      'default': true
    },
    prettifyOnSaveJSON: {
      type: 'boolean',
      'default': false,
      title: 'Prettify On Save JSON'
    },
    grammars: {
      type: 'array',
      'default': ['source.json', 'text.plain.null-grammar']
    }
  },

  doEntireFile: function doEntireFile(editor) {
    var save = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    // don't allow prettify-on-save for null grammar; causes too many false positives
    if (save && editor.getGrammar().scopeName === 'text.plain.null-grammar') return false;

    var grammars = atom.config.get('pretty-json.grammars');
    if (typeof grammars === 'undefined' || !editor) return false;
    if (!grammars.includes(editor.getGrammar().scopeName)) return false;
    return editor.getLastSelection().isEmpty();
  },

  replaceText: function replaceText(editor, fn) {
    editor.mutateSelectedText(function (selection) {
      selection.getBufferRange();
      var text = selection.getText();
      selection.deleteSelectedText();
      var range = selection.insertText(fn(text));
      selection.setBufferRange(range);
    });
  },

  prettify: function prettify(editor, options) {
    var _this = this;

    if (!editor) return;
    var pos = undefined;
    var entire = isEntire(options, function () {
      return _this.doEntireFile(editor);
    });
    var sorted = isSorted(options, function () {
      return true;
    });
    var selected = isSelected(options, function () {
      return true;
    });
    if (entire) {
      pos = editor.getCursorScreenPosition();
      editor.setText(formatter.pretty(editor.getText(), {
        scope: editor.getRootScopeDescriptor(),
        sorted: sorted
      }));
    } else {
      pos = editor.getLastSelection().getScreenRange().start;
      this.replaceText(editor, function (text) {
        return formatter.pretty(text, {
          scope: ['source.json'],
          sorted: sorted
        });
      });
    }
    if (!selected) {
      editor.setCursorScreenPosition(pos);
    }
  },

  minify: function minify(editor, options) {
    var _this2 = this;

    var pos = undefined;
    var entire = isEntire(options, function () {
      return _this2.doEntireFile(editor);
    });
    var selected = isSelected(options, function () {
      return true;
    });
    if (entire) {
      pos = [0, 0];
      editor.setText(formatter.minify(editor.getText()));
    } else {
      pos = editor.getLastSelection().getScreenRange().start;
      this.replaceText(editor, function (text) {
        return formatter.minify(text);
      });
    }
    if (!selected) {
      editor.setCursorScreenPosition(pos);
    }
  },

  jsonify: function jsonify(editor, options) {
    var _this3 = this;

    var pos = undefined;
    var entire = isEntire(options, function () {
      return _this3.doEntireFile(editor);
    });
    var sorted = isSorted(options, function () {
      return false;
    });
    var selected = isSelected(options, function () {
      return true;
    });
    if (entire) {
      pos = editor.getCursorScreenPosition();
      editor.setText(formatter.jsonify(editor.getText(), {
        scope: editor.getRootScopeDescriptor(),
        sorted: sorted
      }));
    } else {
      pos = editor.getLastSelection().getScreenRange().start;
      this.replaceText(editor, function (text) {
        return formatter.jsonify(text, {
          scope: ['source.json'],
          sorted: sorted
        });
      });
    }
    if (!selected) {
      editor.setCursorScreenPosition(pos);
    }
  },

  activate: function activate() {
    var _this4 = this;

    atom.commands.add('atom-workspace', {
      'pretty-json:prettify': function prettyJsonPrettify() {
        var editor = atom.workspace.getActiveTextEditor();
        _this4.prettify(editor, {
          entire: _this4.doEntireFile(editor),
          sorted: false,
          selected: true
        });
      },
      'pretty-json:minify': function prettyJsonMinify() {
        var editor = atom.workspace.getActiveTextEditor();
        _this4.minify(editor, {
          entire: _this4.doEntireFile(editor),
          selected: true
        });
      },
      'pretty-json:sort-and-prettify': function prettyJsonSortAndPrettify() {
        var editor = atom.workspace.getActiveTextEditor();
        _this4.prettify(editor, {
          entire: _this4.doEntireFile(editor),
          sorted: true,
          selected: true
        });
      },
      'pretty-json:jsonify-literal-and-prettify': function prettyJsonJsonifyLiteralAndPrettify() {
        var editor = atom.workspace.getActiveTextEditor();
        _this4.jsonify(editor, {
          entire: _this4.doEntireFile(editor),
          sorted: false,
          selected: true
        });
      },
      'pretty-json:jsonify-literal-and-sort-and-prettify': function prettyJsonJsonifyLiteralAndSortAndPrettify() {
        var editor = atom.workspace.getActiveTextEditor();
        _this4.jsonify(editor, {
          entire: _this4.doEntireFile(editor),
          sorted: true,
          selected: true
        });
      }
    });

    this.subscriptions = new CompositeDisposable();
    this.subscriptions.add(atom.config.observe('pretty-json.prettifyOnSaveJSON', function (value) {
      if (_this4.saveSubscriptions != null) {
        _this4.saveSubscriptions.dispose();
      }
      _this4.saveSubscriptions = new CompositeDisposable();
      if (value) {
        _this4.subscribeToSaveEvents();
      }
    }));
  },

  subscribeToSaveEvents: function subscribeToSaveEvents() {
    var _this5 = this;

    this.saveSubscriptions.add(atom.workspace.observeTextEditors(function (editor) {
      if (!(editor != null ? editor.getBuffer() : undefined)) {
        return;
      }
      var bufferSubscriptions = new CompositeDisposable();
      bufferSubscriptions.add(editor.getBuffer().onWillSave(function (filePath) {
        if (_this5.doEntireFile(editor, true)) {
          return _this5.prettify(editor, {
            entire: true,
            sorted: false,
            selected: false
          });
        }
      }));
      bufferSubscriptions.add(editor.getBuffer().onDidDestroy(function () {
        return bufferSubscriptions.dispose();
      }));
      _this5.saveSubscriptions.add(bufferSubscriptions);
    }));
  },

  deactivate: function deactivate() {
    if (this.subscriptions != null) {
      this.subscriptions.dispose();
    }
    this.subscriptions = null;
  }
};

module.exports = PrettyJSON;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,