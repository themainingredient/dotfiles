#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ""

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ""
  exit
}

verify_xcode () {
  local xcode_command=$(xcodebuild -version)
  local xcode_installed=$?

  if [ $xcode_installed -eq 1 ];
  then
    echo "Please install Xcode from the app store before you continue."
    exit $xcode_installed
  fi
}

setup_gitconfig () {
  if ! [ -f developer/common/git/gitconfig.local.symlink ]
  then
    info "setup gitconfig"

    git_credential="cache"
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential="osxkeychain"
    fi

    user " - What is your github author name?"
    read -e git_AUTHOR_NAME
    user " - What is your github author email?"
    read -e git_AUTHOR_EMAIL

    sed -e "s/AUTHOR_NAME/$git_AUTHOR_NAME/g" -e "s/AUTHOR_EMAIL/$git_AUTHOR_EMAIL/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" developer/common/git/gitconfig.local.symlink.example > developer/common/git/gitconfig.local.symlink

    success "gitconfig"
  fi
}

setup_projects_folder () {
  if ! [ -f common/zsh/localrc.symlink ]
  then
    info "setup projects folder"

    user " - Where are your projects located?"
    read -e projects_folder

    sed -e "s/PROJECTS_FOLDER/$(echo $projects_folder | sed -e 's/[\/&]/\\&/g')/g" common/zsh/localrc.example > common/zsh/localrc.symlink
    success "coding folder"
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info "installing dotfiles"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -name "*.symlink" -not -path "*.git*")
  do
    dst="$HOME/.$(basename "${src%.*}")"
    echo "linking ${src} to ${dst}"
    link_file "$src" "$dst"
  done
}

set_default_to_zsh () {
  local shell_path;
  shell_path="$(which zsh)"

  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    echo "› Changing your shell to zsh..."
    sudo sh -c "echo $shell_path >> /etc/shells"
    chsh -s $(which zsh)
  fi
}

install_homebrew () {
  base/homebrew/install.sh 2>&1
}

install_homebrew_kegs () {
  local location=""
  local role=$1

  case "$1" in
    developer/*)
      location="$1/Brewfile"
      ;;
    "designer")
      location="designer/Brewfile"
      ;;
    *)
      location="common/Brewfile"
      role="common"
      ;;
  esac

  echo "› Installing $role tools"
  brew bundle --file="$location"

  # find the installers and run them iteratively
  find "${role}" -name install.sh -exec sh -c {} \;
}

install_common_tools () {
  install_dotfiles
  install_homebrew
  install_homebrew_kegs "common"
  set_default_to_zsh
}

setup_fastlane () {
  if ! [ -f developer/mobile_development/fastlane/shell.local.zsh ]
  then
    user " - What is your Apple ID you want to use for shipping releases?"
    read -e fastlane_username

    sed -e "s/FL_USERNAME/$fastlane_username/g" developer/mobile_development/fastlane/shell.local.zsh.example > developer/mobile_development/fastlane/shell.local.zsh
  fi
}

ask_developer_tools () {
  read -p "Do you want to set up $1 tools? (Y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    # Optionally you can pass in a reference to a Brewfile
    if [ ! -z "$2" ]
    then
      install_homebrew_kegs "developer/$2"
    fi

    # You can also pass in a function reference that must be called
    if [ ! -z "$3" ]
    then
      $3
    fi
  fi
}

install_developer_tools () {
  read -p "Do you want to set up developer tools? (Y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    verify_xcode
    setup_gitconfig
    setup_projects_folder
    install_homebrew_kegs "developer/common"

    ask_developer_tools "Elixir" "elixir"
    ask_developer_tools "Javascript" "javascript"
    ask_developer_tools "Mobile Development" "" setup_fastlane
    ask_developer_tools "Ruby" "ruby"
  fi
}

install_designer_tools () {
  read -p "Do you want to set up designer tools? (Y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    install_homebrew_kegs "designer"
  fi
}

install_common_tools
install_developer_tools
install_designer_tools

echo ""
echo "  All installed!"
